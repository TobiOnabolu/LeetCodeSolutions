class Solution {
    public boolean isAlienSorted(String[] words, String order) {
        HashMap <Character, Integer> map = new HashMap <Character, Integer>();
        int index = 0;
        
        if (words.length == 1){
            return true;
        }
        
        //fill our hashmap for easy look up when comparing strings
        for (int i = 0; i < order.length(); i ++){
            map.put(order.charAt(i), i);
        }
    
        
        //outer for loop to iterate thru words
        for (int i = 0; i < words.length - 1; i++){
            //set i = 0
            int j = 0;
            //set check_next to false
            boolean check_next = false;
            //inner while loop w/ cond !check_next and i < first word length
            while (check_next == false && j < (words[i]).length())  {       
                    
                //if i > second.length - 1 then return false since theyre them same up until then but second is shorter
                if (j > (words[i+1]).length() - 1){
                    return false;
                }
                
                //if first[i] < second[i] 
                if (map.get((words[i]).charAt(j))  <  map.get((words[i+1]).charAt(j))){
                    //check_next = true and check next word
                    check_next = true;
                }
                
                //else if first == second
                else if(map.get((words[i]).charAt(j))  ==  map.get((words[i+1]).charAt(j))){
                    //incremnet i
                    j++;
                }
                
                //else first > second
                //return false cause thats when were done              
                else{
                    return false;
                }

            }
        }
        
        return true;
        
    }
}

//got the most efficient answer by thinking the whole solution out fully
//key thing here was using hashmap for o(1) look up time
//another key was checking adjacents to find first false
