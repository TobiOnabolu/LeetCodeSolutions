/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 
 
 /*
 
                                                             1
                                                          2     x
                                                        3  x   
                                                      4  x
                                                    5  x 
 
 
 */

/*
    The pattern to recognize here is that to keep track of the level u need another loop. When ever u poll the last element of a level the queue if filled with
    elements all of the same value since we visited added all the children. Knowing that we can run a for loop to the end of that number

*/
 

class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        //double list object
        List<List<Integer>> lists = new ArrayList<>();
        List<Integer> list = new ArrayList<>();
        LinkedList<TreeNode> q = new LinkedList<>();

        if (root == null) return lists;
        q.add(root);
        
        while (q.size() != 0){
            int j = q.size();
            for (int i = 0; i < j; i++){
                TreeNode curr = q.poll();
                list.add(curr.val);
                if (curr.left != null) q.add(curr.left);
                if(curr.right != null) q.add(curr.right);
            }   
            
            lists.add(list);
            list = new LinkedList<>();
        }

            
            
            
        
        
        
        
        //n=0;
        //count= 1;
        
        //in while loop  aftew work has been donedecrement count
        //if count = 0;
            //start new line => innerlist = new innerlist
            //n+ 1
            //count 2^n
        
    
        
        //start with root in queue
        //pop it from queue and do work on it(add it to list)
        //add its children to queue and repeat
        //run while queue is not empty
            //pop node
            //list.add(new list(node.val))
            //enqueu the nodes of node.left, node.right;
        


        return lists;
        
        
    }
}
