/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    private int diameter = 0;
    
    
    public int diameterOfBinaryTree(TreeNode root) {
        //recurse left get max from left 
        //recurse right get max from right 
        //add them together        
        
        /*
                       1
                      / \
                     2   3
                    / \
                   5   6
                  /     \
                 7       8
                /         \
               8           9 
                 
        */
        
        /*
            The solution to this problem was found as such
            - I recognized that since diamater might not inlcude root, each node will have to be treated as root for checking for diameter
            - I recoginized that diamater would be left sub + right sub of each node
            - i didnt recognize how to get max diamater or find a way to efficiently check all nodes
            - was confusing current diameter with other diameters

        
        */
        
        getPath(root);
        
        return diameter;
    }
    
    private int getPath(TreeNode root){
        if (root == null){
            return 0;
        }
        
        int left = getPath(root.left);
        int right = getPath(root.right);
        
        diameter = Math.max(diameter, left + right);
        
        return Math.max(left, right) + 1; 
        
        
        
    }
    
}
