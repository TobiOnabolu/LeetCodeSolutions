/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        
        if (root == null) return new ArrayList<List<Integer>>();
        
        //initiate switch to false
        boolean reverse = false;
        List<List<Integer>> res = new ArrayList<>();
        LinkedList<TreeNode> q = new LinkedList<>();
        List<Integer> list;
        
        q.add(root);
        //traverse queue level order the original way
        //while q is not empty
        while (q.isEmpty() == false) {
        //get size of q
        //reinitiate list integer
            int size = q.size();
            list = new ArrayList<>(); 
        
        //loop for i < size
            for (int i = 0; i < size; i++){
            //q.pop element
            //add its children to queue if they are not null
                TreeNode node = q.pop();
                if (node.left != null) q.add(node.left);
                if (node.right != null) q.add(node.right);
            
            //if switch     
                //prepend this to linked list
            //else
                //append this to linked list
                if (reverse) list.add(0, node.val);
                else list.add(node.val);
            }
        //make switch true if false and false if true after the loop
        //add the list integer to our list
            reverse = reverse ? false : true;
            res.add(list);
        }
        
        
        
        return res;
    }
}
